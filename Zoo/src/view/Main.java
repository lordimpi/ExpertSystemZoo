/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.sf.clipsrules.jni.CLIPSLoadException;
import net.sf.clipsrules.jni.CaptureRouter;
import net.sf.clipsrules.jni.Environment;
import net.sf.clipsrules.jni.Router;

/**
 *
 * @author snt-2
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private Environment clips;
    protected CaptureRouter theRouter;
    private DefaultListModel modelo = new DefaultListModel();

    public Main() {
        initComponents();
        setLocationRelativeTo(null);

        List<String> caracteristicas = Caracteristicas.cargarCaracteristicas();
        caracteristicas.sort(String.CASE_INSENSITIVE_ORDER);
        modelo.addAll(caracteristicas);

        jLCaracteristicas.setModel(modelo);
        //initialize clips
        clips = new Environment();
        theRouter = new CaptureRouter(clips, new String[]{Router.STDOUT,
            Router.STDERR,
            Router.STDWRN});
        try {
            clips.load("zoo.clp");
        } catch (CLIPSLoadException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLCaracteristicas = new javax.swing.JList<>();
        btnPredecirAniaml = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLCaracteristicas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jLCaracteristicas.setFixedCellHeight(35);
        jLCaracteristicas.setFixedCellWidth(120);
        jLCaracteristicas.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane1.setViewportView(jLCaracteristicas);

        btnPredecirAniaml.setLabel("Predecir Animal");
        btnPredecirAniaml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPredecirAniamlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(btnPredecirAniaml))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPredecirAniaml)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPredecirAniamlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPredecirAniamlActionPerformed

        try {
            clips.reset();
            List<String> ElementosSeleccionados = jLCaracteristicas.getSelectedValuesList();
            for (String elemento : ElementosSeleccionados) {
                clips.eval("(assert (" + elemento + " s))");
            }
            clips.run();
            String animal = theRouter.getOutput();
            List<String> miListaSabana = Caracteristicas.cargarSabana();
            List<String> miListaSelvaTropical = Caracteristicas.cargarSelvaTropical();
            List<String> miListaAcuatico = Caracteristicas.cargarEcosistemaAcuatico();
            List<String> miListaMontania = Caracteristicas.cargarMontania();
            
            JOptionPane.showMessageDialog(null, "El animal que usted busca es un " + animal);
            JFanimal mostrarAnimal = new JFanimal(animal);
            mostrarAnimal.setVisible(true);
            //mostrarAnimal.setLocationRelativeTo(null);
            if ("".equals(animal)) {
                JOptionPane.showMessageDialog(null, "Seleccione mas caracteristicas");
            }
            
            List<String> ElementosHabitat = new ArrayList<String>();
            
            if(miListaSabana.contains(animal))
            {
                JOptionPane.showMessageDialog(null, "A continuación verificaremos si usted vive en una zona adecuada para obtener el animal que desea.");
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de clima caliente")==0)
                {
                    ElementosHabitat.add("clima_caliente");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de llanura")==0)
                {
                    ElementosHabitat.add("llanura");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de poca lluvia en el año")==0)
                {
                    ElementosHabitat.add("poca_lluvia");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de suelo poco fértil y seco")==0)
                {
                    ElementosHabitat.add("suelo_seco");
                }
                
                for (String elemento : ElementosHabitat) {
                clips.eval("(assert (" + elemento + " s))");
                }
                
                theRouter = new CaptureRouter(clips, new String[]{Router.STDOUT,
                Router.STDERR,
                Router.STDWRN});
                clips.run();
                String respuesta = theRouter.getOutput();
                respuesta = respuesta.replace("()", "\n");
                if ("".equals(respuesta)) {
                    JOptionPane.showMessageDialog(null, "Usted no vive en un habitat adecuado para tener el animal seleccionado.");
                }else
                {
                    JOptionPane.showMessageDialog(null, respuesta);
                }
            }
            
            if(miListaSelvaTropical.contains(animal))
            {
                JOptionPane.showMessageDialog(null, "A continuación verificaremos si usted vive en una\nzona adecuada para obtener el animal que desea.");
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de bosque denso")==0)
                {
                    ElementosHabitat.add("bosque_denso");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de clima templado")==0)
                {
                    ElementosHabitat.add("clima_templado");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de vegetación abundante")==0)
                {
                    ElementosHabitat.add("vegetacion_abundante");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de bastante lluvia")==0)
                {
                    ElementosHabitat.add("bastante_lluvia");
                }
                
                for (String elemento : ElementosHabitat) {
                clips.eval("(assert (" + elemento + " s))");
                }
                
                theRouter = new CaptureRouter(clips, new String[]{Router.STDOUT,
                Router.STDERR,
                Router.STDWRN});
                clips.run();
                String respuesta = theRouter.getOutput();
                respuesta = respuesta.replace("()", "\n");
                if ("".equals(respuesta)) {
                    JOptionPane.showMessageDialog(null, "Usted no vive en un habitat adecuado para tener el animal seleccionado.");
                }else
                {
                    JOptionPane.showMessageDialog(null, respuesta);
                }
            }
            
            if(miListaAcuatico.contains(animal))
            {
                JOptionPane.showMessageDialog(null, "A continuación verificaremos si usted vive en una\nzona adecuada para obtener el animal que desea.");
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona cercana a un rio?")==0)
                {
                    ElementosHabitat.add("rio");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de alta humedad")==0)
                {
                    ElementosHabitat.add("alta_humedad");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de vegetación acuática")==0)
                {
                    ElementosHabitat.add("vegetacion_acuatica");
                }
                
                for (String elemento : ElementosHabitat) {
                clips.eval("(assert (" + elemento + " s))");
                }
                
                theRouter = new CaptureRouter(clips, new String[]{Router.STDOUT,
                Router.STDERR,
                Router.STDWRN});
                clips.run();
                String respuesta = theRouter.getOutput();
                respuesta = respuesta.replace("()", "\n");
                if ("".equals(respuesta)) {
                    JOptionPane.showMessageDialog(null, "Usted no vive en un habitat adecuado para tener el animal seleccionado.");
                }else
                {
                    JOptionPane.showMessageDialog(null, respuesta);
                }
            }
            
            if(miListaMontania.contains(animal))
            {
                JOptionPane.showMessageDialog(null, "A continuación verificaremos si usted vive en una\nzona adecuada para obtener el animal que desea.");
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona cercana a una cumbre?")==0)
                {
                    ElementosHabitat.add("cumbre");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de mucha altitud")==0)
                {
                    ElementosHabitat.add("altitud");
                }
                
                if(JOptionPane.showConfirmDialog(null, "Usted vive en una zona de clima frío")==0)
                {
                    ElementosHabitat.add("clima_frio");
                }
                
                for (String elemento : ElementosHabitat) {
                clips.eval("(assert (" + elemento + " s))");
                }
                
                theRouter = new CaptureRouter(clips, new String[]{Router.STDOUT,
                Router.STDERR,
                Router.STDWRN});
                clips.run();
                String respuesta = theRouter.getOutput();
                respuesta = respuesta.replace("()", "\n");
                if ("".equals(respuesta)) {
                    JOptionPane.showMessageDialog(null, "Usted no vive en un habitat adecuado para tener el animal seleccionado.");
                }else
                {
                    JOptionPane.showMessageDialog(null, respuesta);
                }
            }
            
            mostrarAnimal.dispose();

            theRouter.clear();
            clips.reset();
        } catch (Exception e) {
            System.out.println("clips.integration.ClipsInterface.PredictActionPerformed()");
            clips.deleteRouter(theRouter);
        }
    
    }//GEN-LAST:event_btnPredecirAniamlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPredecirAniaml;
    private javax.swing.JList<String> jLCaracteristicas;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
